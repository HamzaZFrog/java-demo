pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:20.10.6-dind
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        // for docker build
        ARTY_CREDS=credentials('jenkins_rt')
        
        // for RT plugin : should match the ID just above
        ARTY_CREDS_ID='jenkins_rt'
        
        ART_ID="artifactory-eu"
        MY_BUILD_NAME = 'jenkins-java'
        DOCKER_BUILD_NAME = 'jenkins-java-docker'
        
        JAVA_HOME = '/usr/lib/jvm/java-1.8-openjdk/'
        MAVEN_HOME = '/usr/share/maven'
    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/java-demo', description: 'DO NOT ADD .git at the end')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'main', description: '')

        string(name: 'NEW_VERSION', defaultValue: '2.5.0', description: '')
        string(name: 'NEW_MSG', defaultValue: 'Welcome to Swampup 2021', description: '')

        string(name: 'JPD_URL', defaultValue: 'yann-swampup.dev.aws.devopsacc.team', description: 'DO NOT ADD PROTOCOL')

        string(name: 'MVN_REPO', defaultValue: 'urs-mvn', description: '')
        string(name: 'MVN_PROMOTE', defaultValue: 'urs-mvn-prod-local', description: '')

        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        string(name: 'DOCKER_PROMOTE', defaultValue: 'urs-docker-release-local', description: '')

        booleanParam(name: 'MVN_BUILD', defaultValue: true, description: '')
        booleanParam(name: 'DOCKER_BUILD', defaultValue: true, description: '')
    }
    
    stages {

        stage ('Maven Build') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                container('maven') {
                     
                    git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL

                    dir ("src") {

                        sh """
                            ls -l 
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|" "pom.xml"
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|" "application/pom.xml"
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|" "library/pom.xml"
                            
                            cat pom.xml
    
                            echo "service.message=${params.NEW_MSG}" > application/src/main/resources/application.properties 
                            cat application/src/main/resources/application.properties 
                        """
                        
                        rtServer (
                            id: env.ART_ID,
                            url: "https://${params.JPD_URL}/artifactory",
                            credentialsId: env.ARTY_CREDS_ID
                        )
        
                        rtMavenDeployer (
                            id: "MAVEN_DEPLOYER",
                            serverId: env.ART_ID,
                            releaseRepo: env.MVN_REPO,
                            snapshotRepo: env.MVN_REPO
                        )
        
                        rtMavenResolver (
                            id: "MAVEN_RESOLVER",
                            serverId: env.ART_ID,
                            releaseRepo: env.MVN_REPO,
                            snapshotRepo: env.MVN_REPO
                        )
                        
                        rtBuildInfo (
                            captureEnv: true,
                            excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
         
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                                            
                        rtMavenRun (
                            pom: "pom.xml",
                            goals: 'clean package',
                            deployerId: "MAVEN_DEPLOYER",
                            resolverId: "MAVEN_RESOLVER",
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                      
                        rtPublishBuildInfo (
                            serverId: env.ART_ID,
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                    }
                } // end container
            } // end step
        }   // end stage
        
        stage ('Xray scan') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.MY_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: false
                )   
            }
        }
        

        stage ('Build promotion') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                rtPromote (
                    serverId: env.ART_ID,
                    buildName: env.MY_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.MVN_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: true,
                    copy: false
                )               
            }
        }

        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.MVN_REPO}/**/multi-module-application-${params.NEW_VERSION}.jar\",
                                  \"target": \"multi-module-application.jar\",
                                  \"flat\": \"true\"
                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh """#!/bin/sh
                        apk add curl openjdk11
                        git_path=`echo ${params.MY_GIT_URL} | cut -d/ -f4,5`
                        echo \${git_path}
                        curl -O https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/src/Dockerfile
                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${params.JPD_URL}
                        ls -l 
                        docker build -t ${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp:${params.NEW_VERSION} .
                    """
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp:${params.NEW_VERSION}",
                        targetRepo: params.DOCKER_REPO,
                        properties: 'project-name=uranus;status=stable',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                }
            } // end steps
        } // end stage

        stage ('Xray scan for Docker Build') {
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: false
                )   
            }
        }
        

        stage ('Build promotion for Docker Build') {
            steps {
                rtPromote (
                    // Mandatory parameter
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.DOCKER_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false
                )               
            }
        }

    } // end stages
}
